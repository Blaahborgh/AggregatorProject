{"ast":null,"code":"import _slicedToArray from \"C:\\\\important\\\\Pycharm-projects\\\\AggregatorProject\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\important\\\\Pycharm-projects\\\\AggregatorProject\\\\frontend\\\\src\\\\components\\\\DataTable.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport axios from 'axios';\nconst columns = [{\n  id: 'id',\n  label: 'ID',\n  minWidth: 170\n}, {\n  id: 'name',\n  label: 'Name',\n  minWidth: 100\n}];\n\nfunction createData(id, name) {\n  return {\n    id,\n    name\n  };\n}\n\nlet res = axios.get('http://127.0.0.1:8000/api/authors/');\nlet items = res.data;\nconst dataRows = [];\nthis.state.rows.forEach((items, i) => {\n  dataRows.push(createData(items.id, items.name));\n});\nconst rows = dataRows;\nconsole.log(rows);\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    maxHeight: 440\n  }\n});\nexport default function DataTable() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(0),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        page = _React$useState2[0],\n        setPage = _React$useState2[1];\n\n  const _React$useState3 = React.useState(10),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        rowsPerPage = _React$useState4[0],\n        setRowsPerPage = _React$useState4[1];\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return React.createElement(Paper, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(TableContainer, {\n    className: classes.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, columns.map(column => React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      minWidth: column.minWidth\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, column.label)))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n    return React.createElement(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: row.code,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, columns.map(column => {\n      const value = row[column.id];\n      return React.createElement(TableCell, {\n        key: column.id,\n        align: column.align,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, column.format && typeof value === 'number' ? column.format(value) : value);\n    }));\n  })))), React.createElement(TablePagination, {\n    rowsPerPageOptions: [10, 25, 100],\n    component: \"div\",\n    count: rows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:/important/Pycharm-projects/AggregatorProject/frontend/src/components/DataTable.js"],"names":["React","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","axios","columns","id","label","minWidth","createData","name","res","get","items","data","dataRows","state","rows","forEach","i","push","console","log","useStyles","root","width","container","maxHeight","DataTable","classes","useState","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","map","column","align","slice","row","code","format","length"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport axios from 'axios'\r\n\r\nconst columns = [\r\n    {id: 'id', label: 'ID', minWidth: 170},\r\n    {id: 'name', label: 'Name', minWidth: 100},\r\n];\r\n\r\nfunction createData(id, name) {\r\n    return {id, name};\r\n}\r\n\r\nlet res = axios.get('http://127.0.0.1:8000/api/authors/');\r\nlet items = res.data;\r\nconst dataRows = [];\r\nthis.state.rows.forEach((items, i) => {\r\n    dataRows.push(createData(items.id, items.name));\r\n});\r\n\r\n\r\nconst rows = dataRows;\r\nconsole.log(rows);\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nexport default function DataTable() {\r\n    const classes = useStyles();\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = event => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map(column => (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    align={column.align}\r\n                                    style={{minWidth: column.minWidth}}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                    {columns.map(column => {\r\n                                        const value = row[column.id];\r\n                                        return (\r\n                                            <TableCell key={column.id} align={column.align}>\r\n                                                {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                            </TableCell>\r\n                                        );\r\n                                    })}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}