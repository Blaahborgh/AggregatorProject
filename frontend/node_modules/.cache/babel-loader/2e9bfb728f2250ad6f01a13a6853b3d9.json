{"ast":null,"code":"import _slicedToArray from \"C:\\\\important\\\\Pycharm-projects\\\\AggregatorProject\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\important\\\\Pycharm-projects\\\\AggregatorProject\\\\frontend\\\\src\\\\components\\\\DataTable.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport axios from 'axios';\nconst columns = [{\n  id: 'id',\n  label: 'ID',\n  minWidth: 170\n}, {\n  id: 'name',\n  label: 'Name',\n  minWidth: 100\n}];\n\nfunction createData(id, name) {\n  return {\n    id,\n    name\n  };\n}\n\nfunction getUsers() {\n  // We're using axios instead of Fetch\n  axios // The API we're requesting data from\n  .get(\"http://127.0.0.1:8000/api/authors\") // Once we get a response, we'll map the API endpoints to our props\n  .then(response => response.data.results.map(user => ({\n    id: `${user.id}`,\n    name: `${user.name}`\n  }))) // Let's make sure to change the loading state to display the data\n  .then(users => {\n    this.setState({\n      users,\n      isLoading: false\n    });\n  }) // We can still use the `.catch()` method since axios is promise-based\n  .catch(error => this.setState({\n    error,\n    isLoading: false\n  }));\n}\n\nconst rows = getUsers();\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    maxHeight: 440\n  }\n});\nexport default function DataTable() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(0),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        page = _React$useState2[0],\n        setPage = _React$useState2[1];\n\n  const _React$useState3 = React.useState(10),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        rowsPerPage = _React$useState4[0],\n        setRowsPerPage = _React$useState4[1];\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return React.createElement(Paper, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(TableContainer, {\n    className: classes.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, columns.map(column => React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      minWidth: column.minWidth\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, column.label)))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n    return React.createElement(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: row.code,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, columns.map(column => {\n      const value = row[column.id];\n      return React.createElement(TableCell, {\n        key: column.id,\n        align: column.align,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, column.format && typeof value === 'number' ? column.format(value) : value);\n    }));\n  })))), React.createElement(TablePagination, {\n    rowsPerPageOptions: [10, 25, 100],\n    component: \"div\",\n    count: rows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:/important/Pycharm-projects/AggregatorProject/frontend/src/components/DataTable.js"],"names":["React","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","axios","columns","id","label","minWidth","createData","name","getUsers","get","then","response","data","results","map","user","users","setState","isLoading","catch","error","rows","useStyles","root","width","container","maxHeight","DataTable","classes","useState","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","column","align","slice","row","code","format","length"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport axios from 'axios'\r\n\r\nconst columns = [\r\n    {id: 'id', label: 'ID', minWidth: 170},\r\n    {id: 'name', label: 'Name', minWidth: 100},\r\n];\r\n\r\nfunction createData(id, name) {\r\n    return {id, name};\r\n}\r\n\r\nfunction getUsers() {\r\n  // We're using axios instead of Fetch\r\n  axios\r\n    // The API we're requesting data from\r\n    .get(\"http://127.0.0.1:8000/api/authors\")\r\n    // Once we get a response, we'll map the API endpoints to our props\r\n    .then(response =>\r\n      response.data.results.map(user => ({\r\n          id: `${user.id}`,\r\n          name: `${user.name}`,\r\n      }))\r\n    )\r\n    // Let's make sure to change the loading state to display the data\r\n    .then(users => {\r\n      this.setState({\r\n        users,\r\n        isLoading: false\r\n      });\r\n    })\r\n    // We can still use the `.catch()` method since axios is promise-based\r\n    .catch(error => this.setState({ error, isLoading: false }));\r\n}\r\n\r\nconst rows = getUsers();\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nexport default function DataTable() {\r\n    const classes = useStyles();\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = event => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map(column => (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    align={column.align}\r\n                                    style={{minWidth: column.minWidth}}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                    {columns.map(column => {\r\n                                        const value = row[column.id];\r\n                                        return (\r\n                                            <TableCell key={column.id} align={column.align}>\r\n                                                {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                            </TableCell>\r\n                                        );\r\n                                    })}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}