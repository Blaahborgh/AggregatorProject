{"ast":null,"code":"var _jsxFileName = \"C:\\\\important\\\\Pycharm-projects\\\\AggregatorProject\\\\frontend\\\\src\\\\components\\\\NovelsTable.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport axios from 'axios';\n\nclass NovelsTable extends React.Component {\n  constructor() {\n    super();\n\n    this.handleChangePage = (event, newPage) => {\n      this.setState({\n        page: newPage\n      });\n    };\n\n    this.handleChangeRowsPerPage = event => {\n      this.setState({\n        rowsPerPage: event.target.value,\n        page: 0\n      });\n    };\n\n    this.state = {\n      columns: [{\n        id: 'id',\n        label: 'ID',\n        minWidth: 170\n      }, {\n        id: 'name',\n        label: 'Name',\n        minWidth: 100\n      }, {\n        id: 'author',\n        label: 'Author'\n      }, {\n        id: 'chcount',\n        label: 'Chapters'\n      }],\n      rows: [],\n      classes: makeStyles({\n        root: {\n          width: '100%'\n        },\n        container: {\n          maxHeight: 440\n        }\n      }),\n      page: 0,\n      rowsPerPage: 10\n    };\n    this.handleChangePage = this.handleChangePage.bind(this);\n    this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get('http://127.0.0.1:8000/api/novels').then(response => {\n      this.setState({\n        rows: response.data\n      });\n    });\n  }\n\n  render() {\n    /*\r\n            const handleChangePage = (event, newPage) => {\r\n                setPage(newPage);\r\n            };\r\n    \r\n            const handleChangeRowsPerPage = event => {\r\n                setRowsPerPage(+event.target.value);\r\n                setPage(0);\r\n            };\r\n    */\n    return React.createElement(Paper, {\n      className: this.state.classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(TableContainer, {\n      className: this.state.classes.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Table, {\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.state.columns.map(column => {\n      return React.createElement(TableCell, {\n        key: column.id,\n        align: column.align,\n        style: {\n          minWidth: column.minWidth\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, column.label);\n    }))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.rows.slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map(row => {\n      return React.createElement(TableRow, {\n        hover: true,\n        role: \"checkbox\",\n        tabIndex: -1,\n        key: row.code,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.state.columns.map(column => {\n        const value = row[column.id];\n        return React.createElement(TableCell, {\n          key: column.id,\n          align: column.align,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, value);\n      }));\n    })))), React.createElement(TablePagination, {\n      rowsPerPageOptions: [10, 25, 100],\n      component: \"div\",\n      count: this.state.rows.length,\n      rowsPerPage: this.state.rowsPerPage,\n      page: this.state.page,\n      onChangePage: this.handleChangePage,\n      onChangeRowsPerPage: this.handleChangeRowsPerPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n  }\n\n}\n/*\r\nasync function API()\r\n{\r\n    let response = await axios.get('http://127.0.0.1:8000/api/authors');\r\n    console.log(response.data);\r\n    return response.data;\r\n        .then((response) => {\r\n           console.log(response.data);\r\n            response.data.forEach(row => {\r\n                rows.push([row['id'], row['name']]);\r\n            });\r\n            rows = response.data;\r\n        });\r\n};*/\n\n\nexport default NovelsTable;","map":{"version":3,"sources":["C:/important/Pycharm-projects/AggregatorProject/frontend/src/components/NovelsTable.js"],"names":["React","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","axios","NovelsTable","Component","constructor","handleChangePage","event","newPage","setState","page","handleChangeRowsPerPage","rowsPerPage","target","value","state","columns","id","label","minWidth","rows","classes","root","width","container","maxHeight","bind","componentDidMount","get","then","response","data","render","map","column","align","slice","row","code","length"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport axios from 'axios'\r\n\r\nclass NovelsTable extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            columns: [\r\n                            {id: 'id', label: 'ID', minWidth: 170},\r\n                            {id: 'name', label: 'Name', minWidth: 100},\r\n                            {id: 'author', label: 'Author'},\r\n                            {id: 'chcount', label: 'Chapters'}\r\n                        ],\r\n            rows : [],\r\n            classes: makeStyles({\r\n                            root: {\r\n                                width: '100%',\r\n                            },\r\n                            container: {\r\n                                maxHeight: 440,\r\n                            },\r\n                        }),\r\n            page: 0,\r\n            rowsPerPage: 10\r\n        };\r\n        this.handleChangePage = this.handleChangePage.bind(this);\r\n        this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n    }\r\n\r\n    componentDidMount (){\r\n        axios.get('http://127.0.0.1:8000/api/novels').then(response => {\r\n            this.setState({ rows: response.data });\r\n        });\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        this.setState({\r\n            page: newPage\r\n        });\r\n    };\r\n\r\n    handleChangeRowsPerPage = event => {\r\n        this.setState({\r\n            rowsPerPage: event.target.value,\r\n            page: 0\r\n        })\r\n    };\r\n\r\n    render(){\r\n/*\r\n        const handleChangePage = (event, newPage) => {\r\n            setPage(newPage);\r\n        };\r\n\r\n        const handleChangeRowsPerPage = event => {\r\n            setRowsPerPage(+event.target.value);\r\n            setPage(0);\r\n        };\r\n*/\r\n        return (\r\n            <Paper className={this.state.classes.root}>\r\n                <TableContainer className={this.state.classes.container}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {this.state.columns.map(column => {\r\n                                    return (\r\n                                        <TableCell\r\n                                        key={column.id}\r\n                                        align={column.align}\r\n                                        style={{minWidth: column.minWidth}}>\r\n                                        {column.label}\r\n                                        </TableCell>\r\n                                    );\r\n                                    })\r\n                                }\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {this.state.rows.slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage).map(row => {\r\n                                return (\r\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                        {this.state.columns.map(column => {\r\n                                            const value = row[column.id];\r\n                                            return (\r\n                                                <TableCell key={column.id} align={column.align}>\r\n                                                    {value}\r\n                                                </TableCell>\r\n                                            );\r\n                                        })}\r\n                                    </TableRow>\r\n                                );\r\n                            })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={this.state.rows.length}\r\n                    rowsPerPage={this.state.rowsPerPage}\r\n                    page={this.state.page}\r\n                    onChangePage={this.handleChangePage}\r\n                    onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n/*\r\nasync function API()\r\n{\r\n    let response = await axios.get('http://127.0.0.1:8000/api/authors');\r\n    console.log(response.data);\r\n    return response.data;\r\n        .then((response) => {\r\n           console.log(response.data);\r\n            response.data.forEach(row => {\r\n                rows.push([row['id'], row['name']]);\r\n            });\r\n            rows = response.data;\r\n        });\r\n};*/\r\n\r\nexport default NovelsTable;"]},"metadata":{},"sourceType":"module"}